{"version":3,"sources":["components/Spinner.jsx","components/BanksDataTable.jsx","components/DropDown.jsx","components/BankDetails.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["override","css","Spinner","props","state","loading","className","sizeUnit","height","radius","width","margin","color","this","React","Component","BanksDataTable","headerStyle","borderTop","data","bankData","search","pagination","dataField","dataAlign","dataSort","isKey","DropDown","class","onChange","bankNameChange","options","placeholder","fieldNameChange","fields","value","label","BankDetails","arr","filedvalue","bind","fValue","filter","element","console","log","bank_name","includes","setState","bankValue","cityName","fetch","then","res","json","map","bank","push","Badge","style","fontSize","App","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.27e4ba86.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { css } from '@emotion/core';\r\n// First way to import\r\nimport { FadeLoader } from 'react-spinners';\r\n \r\nconst override = css`\r\n    display: block;\r\n    margin: 0 auto;\r\n    border-color: red;\r\n`;\r\n \r\nclass Spinner extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='sweet-loading'>\r\n        <FadeLoader\r\n          css={override}\r\n          sizeUnit={\"px\"}\r\n          height={15}\r\n          radius={2}\r\n          width={5}\r\n          margin={'2px'}\r\n          color={'#36D7B7'}\r\n          loading={this.state.loading}\r\n        />\r\n      </div> \r\n    )\r\n  }\r\n}\r\n\r\nexport default Spinner","import React from 'react';\r\nimport { BootstrapTable, TableHeaderColumn, ExportCSVButton } from 'react-bootstrap-table';\r\nimport Spinner from './Spinner';\r\n\r\nclass BanksDataTable extends React.Component\r\n{ \r\n    render(){\r\n      return(\r\n          <div className=\"rema-cs-md wrapper-md\" >\r\n            <div className=\"col-md-12 mbsc no-padder\">\r\n              <div className=\"macs-content-body fade-in-up\" >\r\n                  <div className=\"panel panel-default m-b-none dt_hide\">   \r\n                    { \r\n                      this.props.loading ? \r\n                      <Spinner /> : \r\n                      <BootstrapTable headerStyle={ { borderTop: '#DDDDDD 0.1px solid' } } height='435' data={this.props.bankData}  search={true} pagination >\r\n\r\n                           <TableHeaderColumn dataField='ifsc' width='150' dataAlign=\"center\" dataSort={true}  isKey={ true }>IFSC Code</TableHeaderColumn>\r\n                         <TableHeaderColumn dataField='bank_id'width='100' dataAlign=\"center\" dataSort={true} >Bank ID</TableHeaderColumn>\r\n                         <TableHeaderColumn dataField='branch' width='300' dataAlign=\"center\" dataSort={true} >Branch Name</TableHeaderColumn>\r\n                         <TableHeaderColumn dataField='address' width='550'  dataAlign=\"center\" dataSort={true} >Address</TableHeaderColumn>\r\n                         <TableHeaderColumn dataField='city' width='200' dataAlign=\"center\" dataSort={true} >City</TableHeaderColumn>\r\n                         <TableHeaderColumn dataField='district' width='200' dataAlign=\"center\" dataSort={true} >District</TableHeaderColumn>\r\n                         <TableHeaderColumn dataField='state' width='150' dataAlign=\"center\" dataSort={true}>State</TableHeaderColumn>\r\n                         <TableHeaderColumn dataField='bank_name' width='300' dataAlign=\"center\" dataSort={true}>Bank Name</TableHeaderColumn>\r\n\r\n                      </BootstrapTable>\r\n                    //   <BootstrapTable  tableContainerClass='my-custom-class' tableStyle={ { background: '#E9ECEF' } } pagination  headerStyle={ { borderTop: '#DDDDDD 0.1px solid' } } data={ this.props.bankData }  search={true} >\r\n                    //     <TableHeaderColumn dataField='ifsc' width='150' dataAlign=\"center\" dataSort={true}  isKey={ true }>IFSC Code</TableHeaderColumn>\r\n                    //     <TableHeaderColumn dataField='bank_id'width='100' dataAlign=\"center\" dataSort={true} >Bank ID</TableHeaderColumn>\r\n                    //     <TableHeaderColumn dataField='branch' width='300' dataAlign=\"center\" dataSort={true} >Branch Name</TableHeaderColumn>\r\n                    //     <TableHeaderColumn dataField='address' width='550'  dataAlign=\"center\" dataSort={true} >Address</TableHeaderColumn>\r\n                    //     <TableHeaderColumn dataField='city' width='200' dataAlign=\"center\" dataSort={true} >City</TableHeaderColumn>\r\n                    //     <TableHeaderColumn dataField='district' width='200' dataAlign=\"center\" dataSort={true} >District</TableHeaderColumn>\r\n                    //     <TableHeaderColumn dataField='state' width='150' dataAlign=\"center\" dataSort={true}>State</TableHeaderColumn>\r\n                    //     <TableHeaderColumn dataField='bank_name' width='300' dataAlign=\"center\" dataSort={true}>Bank Name</TableHeaderColumn>\r\n                    //   </BootstrapTable>\r\n                    }                      \r\n                  </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n}\r\n\r\nexport default BanksDataTable","import React from 'react';\r\nimport Spinner from './Spinner';\r\nimport Select from 'react-select';\r\n\r\nclass DropDown extends React.Component {\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-3\">\r\n                    <Select\r\n                        onChange={this.props.bankNameChange}\r\n                        options={this.props.options}\r\n                        placeholder=\"Select City\"/>\r\n                </div>\r\n                <div class=\"col-sm-3\">\r\n                    <Select\r\n                        onChange={this.props.fieldNameChange}\r\n                        options={this.props.fields}\r\n                        placeholder=\"Select Fields\"/>\r\n                </div>\r\n            </div>\r\n        )}\r\n}\r\n\r\nexport default DropDown","import React from 'react';\r\nimport { Badge } from 'reactstrap';\r\nimport BanksDataTable from './BanksDataTable';\r\nimport DropDown from './DropDown';\r\nimport '../components/DataTable.css'\r\n\r\n\r\nconst options = [\r\n  { value: 'BANGALORE', label: 'BANGALORE' },\r\n  { value: 'PUNE', label: 'PUNE' },\r\n  { value: 'MUMBAI', label: 'MUMBAI' },\r\n  { value: 'DELHI', label: 'DELHI' },\r\n  { value: 'KOLKATA', label: 'KOLKATA' },\r\n  \r\n];\r\n\r\nconst fields = [\r\n  { value: 'ifsc', label: 'IFSC' },\r\n  { value: 'bank_name', label: 'BANK NAME' },\r\n  { value: 'branch', label: 'BRANCH' },\r\n];\r\n\r\nclass BankDetails extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        data: [],\r\n        loading: false,\r\n        arr:[],\r\n        bankData:[],\r\n        filedvalue:''  \r\n      }\r\n      this.bankNameChange = this.bankNameChange.bind(this)\r\n      this.fieldNameChange = this.fieldNameChange.bind(this)\r\n    }\r\n\r\n    //Field Selection\r\n    fieldNameChange(fValue){\r\n        let filedvalue = fValue.value\r\n        const filteredData = this.state.bankData.filter(element => {\r\n          console.log(\"element\",element.bank_name)\r\n          console.log(\"filedvalue\",filedvalue)\r\n          return element.bank_name.includes(filedvalue);\r\n        });\r\n        this.setState({\r\n            filedvalue:filedvalue\r\n        })\r\n    }\r\n\r\n    //Bank Selection\r\n    bankNameChange(bankValue){  \r\n      this.setState({ loading: true }, () => {\r\n        let cityName = bankValue.value\r\n        let curl = \"https://vast-shore-74260.herokuapp.com/banks?city=\"+cityName;\r\n        fetch(curl)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          if(json)\r\n          {\r\n            var arr=[]\r\n            json.map( bank => { arr.push(bank)})\r\n            this.setState({\r\n                bankData:arr,\r\n                loading: false,\r\n            })\r\n          } \r\n        });\r\n      })\r\n    }\r\n\r\n    render() {\r\n      const { loading, bankData } = this.state\r\n      return (\r\n              <div>\r\n                <div className=\"macs-content\">\r\n                  <div className=\"macs-content-body fade-in-up no-padder\">\r\n                    <div className=\"bg-dark lter b-b rema-cs-xs w-full \">\r\n                        <ol className=\"breadcrumb bc-1  m-b-none \">\r\n                          <div className=\"container text-center\">\r\n                              <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                  <Badge color=\"dark\" style={{fontSize: 20}}>Get Bank Details</Badge>\r\n                                </div>\r\n                              </div>\r\n                          </div> \r\n                        </ol>      \r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"container\">\r\n                  <DropDown bankNameChange={this.bankNameChange} fields={fields} options={options} fieldNameChange={this.fieldNameChange} />  \r\n                </div>\r\n                <BanksDataTable bankData={bankData} loading={loading} />       \r\n              </div>\r\n              )}\r\n    }\r\n  export default BankDetails","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport BankDetails from './components/BankDetails'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{backgroundColor: \"#E9ECEF\"}} >\r\n      <BankDetails />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}